{%- import 'snippet.j2' as snippet -%}

{{ snippet.prjgen("ipgen", prjdir, files=files, top=wrap_name) }}

{% for name, cfg in axi_port_cfg.items() %}
  {% if cfg.t == 'bram' %}
    {{ snippet.ip_inst("dtibram_" + name, "axi_bram_ctrl", ipdir=os.path.join(prjdir, "ipgen.srcs", "sources_1", "ip"),
    params={"protocol": "AXI4", "single_port_bram": 1, "ecc_type": 0, "MEM_DEPTH": 16384}) }}
  {% endif %}
{% endfor %}

ipx::package_project -import_files -root_dir {{ipdir}}

set_property name {{ip_name}} [ipx::current_core]
set_property display_name {{ip_name}} [ipx::current_core]
set_property description {{description}} [ipx::current_core]
set_property taxonomy /AXI_Infrastructure [ipx::current_core]
set_property supported_families {zynq Production zynquplus Production artix7 Production kintex7 Production kintexu Production virtexuplus Beta virtexuplusHBM Beta} [ipx::current_core]


{% if drv_files %}
ipx::add_file_group -type software_driver {} [ipx::current_core]

{% for f in drv_files %}
ipx::add_file {{f}} [ipx::get_file_groups xilinx_softwaredriver -of_objects [ipx::current_core]]
set_property type {cSource driver_src} [ipx::get_files {{f}} -of_objects [ipx::get_file_groups xilinx_softwaredriver -of_objects [ipx::current_core]]]
{% endfor %}

ipx::add_file driver/{{ip_name}}_v1_0/data/{{ip_name}}.mdd [ipx::get_file_groups xilinx_softwaredriver -of_objects [ipx::current_core]]
set_property type {mdd driver_mdd} [ipx::get_files driver/{{ip_name}}_v1_0/data/{{ip_name}}.mdd -of_objects [ipx::get_file_groups xilinx_softwaredriver -of_objects [ipx::current_core]]]

ipx::add_file driver/{{ip_name}}_v1_0/data/{{ip_name}}.tcl [ipx::get_file_groups xilinx_softwaredriver -of_objects [ipx::current_core]]
set_property type {tclSource driver_tcl} [ipx::get_files driver/{{ip_name}}_v1_0/data/{{ip_name}}.tcl -of_objects [ipx::get_file_groups xilinx_softwaredriver -of_objects [ipx::current_core]]]

ipx::add_file driver/{{ip_name}}_v1_0/src/Makefile [ipx::get_file_groups xilinx_softwaredriver -of_objects [ipx::current_core]]
set_property type {driver_src} [ipx::get_files driver/{{ip_name}}_v1_0/src/Makefile -of_objects [ipx::get_file_groups xilinx_softwaredriver -of_objects [ipx::current_core]]]

{% endif %}

{% for name, cfg in axi_port_cfg.items() %}
  {% if cfg.t == 'axidma' %}
    {% set axi_intf = name + "_ctrl" %}
  {% elif cfg.t == 'axi' %}
    {% set axi_intf = name %}
  {% else %}
    {% continue %}
  {% endif %}

ipx::add_user_parameter C_{{axi_intf.upper()}}_BASEADDR [ipx::current_core]
set_property value_resolve_type user [ipx::get_user_parameters C_{{axi_intf.upper()}}_BASEADDR -of_objects [ipx::current_core]]
ipgui::add_param -name {C_{{axi_intf.upper()}}_BASEADDR} -component [ipx::current_core]
set_property display_name {C S Axi Lite Baseaddr} [ipgui::get_guiparamspec -name "C_{{axi_intf.upper()}}_BASEADDR" -component [ipx::current_core] ]
set_property widget {hexEdit} [ipgui::get_guiparamspec -name "C_{{axi_intf.upper()}}_BASEADDR" -component [ipx::current_core] ]
set_property value 0xFFFFFFFF [ipx::get_user_parameters C_{{axi_intf.upper()}}_BASEADDR -of_objects [ipx::current_core]]
set_property value_bit_string_length 32 [ipx::get_user_parameters C_{{axi_intf.upper()}}_BASEADDR -of_objects [ipx::current_core]]
set_property enablement_value false [ipx::get_user_parameters C_{{axi_intf.upper()}}_BASEADDR -of_objects [ipx::current_core]]
set_property value_format bitString [ipx::get_user_parameters C_{{axi_intf.upper()}}_BASEADDR -of_objects [ipx::current_core]]
ipx::add_user_parameter C_{{axi_intf.upper()}}_HIGHADDR [ipx::current_core]
set_property value_resolve_type user [ipx::get_user_parameters C_{{axi_intf.upper()}}_HIGHADDR -of_objects [ipx::current_core]]
ipgui::add_param -name {C_{{axi_intf.upper()}}_HIGHADDR} -component [ipx::current_core]
set_property display_name {C S Axi Lite Highaddr} [ipgui::get_guiparamspec -name "C_{{axi_intf.upper()}}_HIGHADDR" -component [ipx::current_core] ]
set_property widget {hexEdit} [ipgui::get_guiparamspec -name "C_{{axi_intf.upper()}}_HIGHADDR" -component [ipx::current_core] ]
set_property value 0x00000000 [ipx::get_user_parameters C_{{axi_intf.upper()}}_HIGHADDR -of_objects [ipx::current_core]]
set_property value_bit_string_length 32 [ipx::get_user_parameters C_{{axi_intf.upper()}}_HIGHADDR -of_objects [ipx::current_core]]
set_property enablement_value false [ipx::get_user_parameters C_{{axi_intf.upper()}}_HIGHADDR -of_objects [ipx::current_core]]
set_property value_format bitString [ipx::get_user_parameters C_{{axi_intf.upper()}}_HIGHADDR -of_objects [ipx::current_core]]

set base_param [ipx::add_address_block_parameter OFFSET_BASE_PARAM [ipx::get_address_blocks reg0 -of_objects [ipx::get_memory_maps {{axi_intf}} -of_objects [ipx::current_core]]]]
set_property value C_{{axi_intf.upper()}}_BASEADDR $base_param
set high_param [ipx::add_address_block_parameter OFFSET_HIGH_PARAM [ipx::get_address_blocks reg0 -of_objects [ipx::get_memory_maps {{axi_intf}} -of_objects [ipx::current_core]]]]
set_property value C_{{axi_intf.upper()}}_HIGHADDR $high_param

{% endfor %} 

{# ipx::add_user_parameter ID_WIDTH [ipx::current_core] #}
{# set_property value_resolve_type user [ipx::get_user_parameters ID_WIDTH -of_objects [ipx::current_core]] #}
{# ipgui::add_param -name {ID_WIDTH} -component [ipx::current_core] #}
{# set_property display_name {ID Width} [ipgui::get_guiparamspec -name "ID_WIDTH" -component [ipx::current_core] ] #}
{# set_property widget {textEdit} [ipgui::get_guiparamspec -name "ID_WIDTH" -component [ipx::current_core] ] #}
{# set_property value 0 [ipx::get_user_parameters ID_WIDTH -of_objects [ipx::current_core]] #}
{# set_property value_format long [ipx::get_user_parameters ID_WIDTH -of_objects [ipx::current_core]] #}
{# set_property value_validation_type range_long [ipx::get_user_parameters ID_WIDTH -of_objects [ipx::current_core]] #}
{# set_property value_validation_range_minimum 0 [ipx::get_user_parameters ID_WIDTH -of_objects [ipx::current_core]] #}
{# set_property value_validation_range_maximum 32 [ipx::get_user_parameters ID_WIDTH -of_objects [ipx::current_core]] #}

{# set_property enablement_dependency {(spirit:decode(id('PARAM_VALUE.ID_WIDTH')) > 0 )} [ipx::get_ports s_axi_arid -of_objects [ipx::current_core]] #}

{# ipx::remove_address_block reg0 [ipx::get_memory_maps s_axi -of_objects [ipx::current_core]] #}
{# ipx::add_memory_map Mem0 [ipx::current_core] #}
{# ipx::remove_memory_map Mem0 [ipx::current_core] #}
{# ipx::add_address_block Mem0 [ipx::get_memory_maps s_axi -of_objects [ipx::current_core]] #}

{# ipgui::remove_param -component [ipx::current_core] [ipgui::get_guiparamspec -name "C_AXI_ID_WIDTH" -component [ipx::current_core]] #}
{# ipgui::move_param -component [ipx::current_core] -order 0 [ipgui::get_guiparamspec -name "ID_WIDTH" -component [ipx::current_core]] -parent [ipgui::get_pagespec -name "Page 0" -component [ipx::current_core]] #}

# Package IP
ipx::create_xgui_files [ipx::current_core]
ipx::update_checksums [ipx::current_core]
ipx::save_core [ipx::current_core]
